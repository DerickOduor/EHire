// <auto-generated />
using System;
using EHire.Core.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EHire.Core.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EHire.Core.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("OtherName");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<DateTime>("ActionTime");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserTypesId");

                    b.Property<int>("UsertypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypesId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("Locked");

                    b.Property<string>("OtherName");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.EWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<int>("UserId");

                    b.Property<int>("UserTypeId");

                    b.Property<int?>("UserTypesId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypesId");

                    b.ToTable("EWallet");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.GearTransmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Transmission");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("GearTransmission");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HireRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DateRequested");

                    b.Property<DateTime>("ExtendHirePeriodTo");

                    b.Property<DateTime>("From");

                    b.Property<int>("HireActivityId");

                    b.Property<int?>("HiredVehicleId");

                    b.Property<int?>("HiringActivityId");

                    b.Property<int>("RegionId");

                    b.Property<DateTime>("To");

                    b.Property<int>("TownId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HiredVehicleId");

                    b.HasIndex("HiringActivityId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TownId");

                    b.HasIndex("VehicleId");

                    b.ToTable("HireRequest");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiredVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DateHired");

                    b.Property<int>("HireRequestId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HireRequestId");

                    b.HasIndex("VehicleId");

                    b.ToTable("HiredVehicle");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiredVehicleSignOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CustomerSignOff");

                    b.Property<int>("HireRequestId");

                    b.Property<bool>("InstitutionSignOff");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("HireRequestId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("HiredVehicleSignOff");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiringActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity");

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("HiringActivity");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DateRegistered");

                    b.Property<string>("Email");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("PostalAddress");

                    b.Property<int>("RegionId");

                    b.Property<int>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TownId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.InstitutionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DatAdded");

                    b.Property<string>("FirstName");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("LastName");

                    b.Property<bool>("Locked");

                    b.Property<string>("OtherName");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionUser");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLoggedIn");

                    b.Property<bool>("Locked");

                    b.Property<DateTime>("LoginTime");

                    b.Property<DateTime>("LogoutTime");

                    b.Property<bool>("PasswordReset");

                    b.Property<int>("ReasonId");

                    b.Property<string>("SecurityCode");

                    b.Property<DateTime>("SecurityCodeExpiry");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName");

                    b.Property<int>("UserTypeId");

                    b.Property<int?>("UserTypesId");

                    b.HasKey("Id");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UserTypesId");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeSent");

                    b.Property<int>("From");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsSent");

                    b.Property<string>("Message");

                    b.Property<string>("Subject");

                    b.Property<int>("To");

                    b.Property<int?>("UserTypesId");

                    b.Property<int>("UsertypeFrom");

                    b.Property<int>("UsertypeTo");

                    b.HasKey("Id");

                    b.HasIndex("UserTypesId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Maintenance");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("MaintenanceType");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.PasswordDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("PasswordDictionary");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Passwords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Password");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserTypesId");

                    b.Property<int>("UsertypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypesId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid");

                    b.Property<DateTime>("DatePaid");

                    b.Property<int>("HireRequestId");

                    b.Property<bool>("IsPaid");

                    b.Property<decimal>("TotalCost");

                    b.HasKey("Id");

                    b.HasIndex("HireRequestId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.PaymentOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<string>("BillNo");

                    b.Property<string>("Code");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("ReasonDescription");

                    b.Property<int>("ReasonTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ReasonTypeId");

                    b.ToTable("Reason");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.ReasonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("ReasonType");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("RegionId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.UserTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId");

                    b.Property<string>("EngineNumber");

                    b.Property<double>("FuelCapacity");

                    b.Property<double>("FuelConsumption");

                    b.Property<int>("FuelTypeId");

                    b.Property<int>("GearTansmissionTypeId");

                    b.Property<int?>("GearTransmissionId");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("RegistrationNumber");

                    b.Property<int>("SeatingCapacity");

                    b.Property<int?>("VehicleBrandId");

                    b.Property<int>("VehicleModelId");

                    b.Property<int?>("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("GearTransmissionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("VehicleBrandId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<string>("Brand");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleBrand");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleMaitenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<string>("Description");

                    b.Property<int>("MaintenanceTypeId");

                    b.Property<bool>("Status");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleMaitenance");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Model");

                    b.Property<int>("VehicleBrandId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("VehicleModel");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<int>("AdminId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Audit", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.UserTypes", "UserTypes")
                        .WithMany("Audits")
                        .HasForeignKey("UserTypesId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.EWallet", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.UserTypes", "UserTypes")
                        .WithMany("EWallets")
                        .HasForeignKey("UserTypesId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.FuelType", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("FuelTypes")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.GearTransmission", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("GearTransmissions")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HireRequest", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("HireRequest")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.HiredVehicle", "HiredVehicle")
                        .WithMany()
                        .HasForeignKey("HiredVehicleId");

                    b.HasOne("EHire.Core.Domain.Entities.HiringActivity", "HiringActivity")
                        .WithMany("HireRequest")
                        .HasForeignKey("HiringActivityId");

                    b.HasOne("EHire.Core.Domain.Entities.Region", "Region")
                        .WithMany("HireRequest")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.Town", "Town")
                        .WithMany("HireRequest")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EHire.Core.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("HireRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiredVehicle", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("HiredVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.HireRequest", "HireRequest")
                        .WithMany("HiredVehicles")
                        .HasForeignKey("HireRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EHire.Core.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("HiredVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiredVehicleSignOff", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.HireRequest", "HireRequest")
                        .WithOne("HiredVehicleSignOff")
                        .HasForeignKey("EHire.Core.Domain.Entities.HiredVehicleSignOff", "HireRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.Vehicle")
                        .WithMany("HiredVehicleSignOffs")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.HiringActivity", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("HiringActivities")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Institution", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Region", "Region")
                        .WithMany("Institutions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.Town", "Town")
                        .WithMany("Institutions")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.InstitutionUser", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Institution", "Institution")
                        .WithMany("InstitutionUsers")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Login", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Reason", "Reason")
                        .WithMany("Logins")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.UserTypes", "UserTypes")
                        .WithMany("Logins")
                        .HasForeignKey("UserTypesId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Mail", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.UserTypes", "UserTypes")
                        .WithMany("Mails")
                        .HasForeignKey("UserTypesId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.MaintenanceType", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("MaintenanceTypes")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.PasswordDictionary", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("PasswordDictionaries")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Passwords", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.UserTypes", "UserTypes")
                        .WithMany("Passwords")
                        .HasForeignKey("UserTypesId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.HireRequest", "HireRequest")
                        .WithMany("Payments")
                        .HasForeignKey("HireRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.PaymentOptions", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("PaymentOptions")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Reason", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("Reasons")
                        .HasForeignKey("AdminId");

                    b.HasOne("EHire.Core.Domain.Entities.ReasonType", "ReasonType")
                        .WithMany()
                        .HasForeignKey("ReasonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.ReasonType", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("ReasonTypes")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Region", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("Regions")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Role", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("Roles")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Town", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("Towns")
                        .HasForeignKey("AdminId");

                    b.HasOne("EHire.Core.Domain.Entities.Region", "Region")
                        .WithMany("Towns")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.UserTypes", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("UserTypes")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("EHire.Core.Domain.Entities.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.GearTransmission", "GearTransmission")
                        .WithMany()
                        .HasForeignKey("GearTransmissionId");

                    b.HasOne("EHire.Core.Domain.Entities.Institution", "Institution")
                        .WithMany("Vehicles")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.VehicleBrand", "VehicleBrand")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleBrandId");

                    b.HasOne("EHire.Core.Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleBrand", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("VehicleBrands")
                        .HasForeignKey("AdminId");

                    b.HasOne("EHire.Core.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("VehicleBrands")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleMaitenance", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.MaintenanceType", "MaintenanceType")
                        .WithMany("VehicleMaitenances")
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EHire.Core.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleMaitenances")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("VehicleModels")
                        .HasForeignKey("AdminId");

                    b.HasOne("EHire.Core.Domain.Entities.VehicleBrand", "VehicleBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EHire.Core.Domain.Entities.VehicleType", b =>
                {
                    b.HasOne("EHire.Core.Domain.Entities.Admin", "Admin")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
